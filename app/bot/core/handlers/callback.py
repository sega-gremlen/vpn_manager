import asyncio
from datetime import date, timedelta
from typing import List

from app.bot.core.main import Bot

from aiogram.types import CallbackQuery, Message, InputMedia
from app.bot.core.utils.statesform import BuySubSteps, CheckExistingSub, ChooseOS
from app.bot.templates.jinja_templates import *
from aiogram.fsm.context import FSMContext
from app.bot.core.keyboards.inline import *
from app.db.old_vpn_db.requests import check_clients_number, Client
from app.bot.sources.source_urls import *

from app.db.payment_requests.models import PaymentRequests
from app.db.subscriptions.models import Subscriptions
from app.db.users.models import Users

from app.main_interface import MainInterface


# -------------------- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ --------------------
async def get_main_menu(message: Message, state: FSMContext):
    print('–ó–∞–ø—É—â–µ–Ω —Ö—ç–Ω–¥–ª–µ—Ä get_main_menu')

    await state.clear()

    if type(message) is CallbackQuery:
        await message.message.edit_text(text=user_main_menu_tm.render(), reply_markup=user_main_menu_kb())
    else:
        if message.text.startswith('/'):
            await MainInterface().create_user(telegram_id=str(message.from_user.id))

            await message.answer(text=user_main_menu_tm.render(), reply_markup=user_main_menu_kb())
        else:
            await message.edit_text(text=user_main_menu_tm.render(), reply_markup=user_main_menu_kb())


async def buy_subscription(call: CallbackQuery, state: FSMContext):
    print('–ó–∞–ø—É—â–µ–Ω —Ö—ç–Ω–¥–ª–µ—Ä buy_subscription')
    await call.message.edit_text(buy_subscription_tm.render(), reply_markup=periods_value_kb())
    await state.clear()
    await state.update_data(user_id=call.message.from_user.id)
    await state.set_state(BuySubSteps.GET_PERIODS)
    await call.answer()


async def buy_subscription_get_periods(call: CallbackQuery, state: FSMContext):
    print('–ó–∞–ø—É—â–µ–Ω —Ö—ç–Ω–¥–ª–µ—Ä buy_subscription_get_periods')

    periods = int(call.data)
    telegram_id = str(call.from_user.id)

    last_active_sub: Subscriptions = await MainInterface().check_existing_sub(telegram_id)

    if last_active_sub:
        stop_date = (last_active_sub.stop + timedelta(days=30 * periods))
        text = (f'–° —É—á–µ—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ {last_active_sub.stop}, '
                f'–ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {stop_date.strftime("%d.%m.%Y")} –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ')
    else:
        stop_date = (date.today() + timedelta(days=30 * periods))
        text = f'–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {stop_date.strftime("%d.%m.%Y")} –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ'

    payment_request: PaymentRequests = await MainInterface().create_payment_request(
        telegram_id,
        periods,
        'simple',
    )

    redirect_url = await MainInterface().create_redirect_url(payment_request.label)

    await call.message.edit_text(text=text, reply_markup=pay_kb(periods, redirect_url))

    await state.set_state(BuySubSteps.PAY_SUB)
    await state.update_data(telegram_id=telegram_id)

    await call.answer()


async def wait_for_payment(call: CallbackQuery, state: FSMContext):
    print('–ó–∞–ø—É—â–µ–Ω —Ö—ç–Ω–¥–ª–µ—Ä wait_for_payment')

    await call.message.answer('–ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã...')

    # data = await state.get_data()
    #
    # a = await bot.send_message(data['telegram_id'], )
    #
    # print(a)
    #
    # await state.update_data(last_call=call)


# -------------------- –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ —Å—Ç–∞—Ä–æ–≥–æ VPN --------------------
async def existing_sub(call: CallbackQuery, state: FSMContext):
    print('–ó–∞–ø—É—â–µ–Ω —Ö—ç–Ω–¥–ª–µ—Ä get_exist_sub')

    await state.set_state(CheckExistingSub.GET_NUMBER)
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +70007770077', reply_markup=back_kb())
    await call.answer()


async def existing_sub_number_check(message: Message):
    phone_to_check = message.text
    clients: List[Client] = check_clients_number(phone_to_check)

    if len(clients) == 1:
        client_obj: Client = clients[0]
        expired_date = client_obj.activated_date + timedelta(days=client_obj.subscribe_duration)
        if expired_date >= date.today():
            await message.answer(xray_url.render())
            await message.answer(f'üîùüîùüîù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ üîùüîùüîù\n\n\n'
                                 f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {expired_date.strftime("%m.%d.%Y")}\n'
                                 '–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –û–°',
                                 reply_markup=support_kb())

        else:
            await message.answer(f'–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {expired_date.strftime("%m.%d.%Y")}',
                                 reply_markup=support_kb())

    elif len(clients) > 1:
        await message.answer('–ù–∞ –¥–∞–Ω–Ω–æ–º –Ω–æ–º–µ—Ä–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–æ–∫, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
                             reply_markup=support_kb())
    else:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –Ω–∞—à–ª–æ—Å—å –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏',
                             reply_markup=support_kb())


async def wrong_number_format(message: Message):
    await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞\n'
                         '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +70007770077',
                         reply_markup=support_kb())


# todo –°—Ç–∞—Ç–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
async def os_choose(call: CallbackQuery, state: FSMContext):
    print('–ó–∞–ø—É—â–µ–Ω —Ö—ç–Ω–¥–ª–µ—Ä get_instructions')

    await state.clear()
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É', reply_markup=os_choose_kb())


async def ios_instruction(call: CallbackQuery, state: FSMContext):
    print('–ó–∞–ø—É—â–µ–Ω —Ö—ç–Ω–¥–ª–µ—Ä ios_instruction')

    await state.set_state(ChooseOS.OS_SECTION)
    await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É', reply_markup=ios_choose_kb())


async def foxray_instruction(call: CallbackQuery, state: FSMContext):
    print('–ó–∞–ø—É—â–µ–Ω —Ö—ç–Ω–¥–ª–µ—Ä ios_instruction')

    await state.set_state(ChooseOS.PROGRAM_SECTION)
    await call.message.edit_text(text=ios_foxray_instruction.render(), reply_markup=back_kb())


async def streisand_instruction(call: CallbackQuery, state: FSMContext):
    print('–ó–∞–ø—É—â–µ–Ω —Ö—ç–Ω–¥–ª–µ—Ä ios_instruction')

    await state.set_state(ChooseOS.PROGRAM_SECTION)
    await call.message.edit_text(text=ios_streisand_instruction.render(), reply_markup=back_kb())


async def android_instruction(call: CallbackQuery, state: FSMContext):
    print('–ó–∞–ø—É—â–µ–Ω —Ö—ç–Ω–¥–ª–µ—Ä android_instruction')

    await state.set_state(ChooseOS.OS_SECTION)
    await call.message.edit_text(text=android_v2ray_instruction.render(), reply_markup=back_kb())


async def windows_instruction(call: CallbackQuery, state: FSMContext):
    print('–ó–∞–ø—É—â–µ–Ω —Ö—ç–Ω–¥–ª–µ—Ä windows_instruction')

    await state.set_state(ChooseOS.OS_SECTION)
    await call.message.edit_text(text='Windows –ö–∞—Ä—Ç–∏–Ω–∫–∞', reply_markup=back_kb())


async def linux_instruction(call: CallbackQuery, state: FSMContext):
    print('–ó–∞–ø—É—â–µ–Ω —Ö—ç–Ω–¥–ª–µ—Ä linux_instruction')

    await state.set_state(ChooseOS.OS_SECTION)
    await call.message.edit_text(text='Linux Guide', reply_markup=back_kb())
